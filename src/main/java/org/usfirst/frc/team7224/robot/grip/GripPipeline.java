package org.usfirst.frc.team7224.robot.grip;

import edu.wpi.first.cameraserver.CameraServer;

import edu.wpi.first.wpilibj.vision.VisionPipeline;

import org.opencv.core.*;

import org.opencv.imgproc.*;

/**
 * GripPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline implements VisionPipeline {

	// Outputs
	private Mat hsvThresholdOutput = new Mat();
	private Mat cvErodeOutput = new Mat();
	private Mat cvDilateOutput = new Mat();
	private Mat maskOutput = new Mat();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	@Override
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = { 24.280575539568343, 41.21212121212121 };
		double[] hsvThresholdSaturation = { 68.79496402877697, 186.31313131313132 };
		double[] hsvThresholdValue = { 149.05575539568346, 255.0 };
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step CV_erode0:
		Mat cvErodeSrc = hsvThresholdOutput;
		Mat cvErodeKernel = new Mat();
		Point cvErodeAnchor = new Point(-1, -1);
		double cvErodeIterations = 3.0;
		int cvErodeBordertype = Core.BORDER_CONSTANT;
		Scalar cvErodeBordervalue = new Scalar(-1);
		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue,
				cvErodeOutput);

		// Step CV_dilate0:
		Mat cvDilateSrc = cvErodeOutput;
		Mat cvDilateKernel = new Mat();
		Point cvDilateAnchor = new Point(-1, -1);
		double cvDilateIterations = 15.0;
		int cvDilateBordertype = Core.BORDER_CONSTANT;
		Scalar cvDilateBordervalue = new Scalar(-1);
		cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype,
				cvDilateBordervalue, cvDilateOutput);

		// Step Mask0:
		Mat maskInput = source0;
		Mat maskMask = cvDilateOutput;
		mask(maskInput, maskMask, maskOutput);

	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * 
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * 
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErodeOutput() {
		return cvErodeOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * 
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilateOutput() {
		return cvDilateOutput;
	}

	/**
	 * This method is a generated getter for the output of a Mask.
	 * 
	 * @return Mat output from Mask.
	 */
	public Mat maskOutput() {
		return maskOutput;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input  The image on which to perform the HSL threshold.
	 * @param hue    The min and max hue
	 * @param sat    The min and max saturation
	 * @param val    The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Expands area of lower value in an image.
	 * 
	 * @param src         the Image to erode.
	 * @param kernel      the kernel for erosion.
	 * @param anchor      the center of the kernel.
	 * @param iterations  the number of times to perform the erosion.
	 * @param borderType  pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst         Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations, int borderType, Scalar borderValue,
			Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1, -1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int) iterations, borderType, borderValue);
	}

	/**
	 * Expands area of higher value in an image.
	 * 
	 * @param src         the Image to dilate.
	 * @param kernel      the kernel for dilation.
	 * @param anchor      the center of the kernel.
	 * @param iterations  the number of times to perform the dilation.
	 * @param borderType  pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst         Output Image.
	 */
	private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations, int borderType, Scalar borderValue,
			Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1, -1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.dilate(src, dst, kernel, anchor, (int) iterations, borderType, borderValue);
	}

	/**
	 * Filter out an area of an image using a binary mask.
	 * 
	 * @param input  The image on which the mask filters.
	 * @param mask   The binary image that is used to filter.
	 * @param output The image in which to store the output.
	 */
	private void mask(Mat input, Mat mask, Mat output) {
		mask.convertTo(mask, CvType.CV_8UC1);
		Core.bitwise_xor(output, output, output);
		input.copyTo(output, mask);
	}

	// Blue A has the rightmost pixel at ~530 px > 520 P/F
	// Red A has the leftmost pixel at ~28 px < 40 P/F
	// Blue B has the upmost pixel at ~87 px < 90 px

	// Code is:
	// return 0 = Red A
	// return 1 = Blue A
	// return 2 = Red B
	// return 3 = Blue B

	public int RunPipeline() {
		CameraServer server = CameraServer.getInstance();
		server.startAutomaticCapture(0);

		Mat grabbedImage = new Mat();
		while(server.getVideo().grabFrame(grabbedImage) == 0);

		process(grabbedImage);
		Mat ImageIn = maskOutput;

		for (int i = 0; i < ImageIn.rows(); i++) {
			for (int j = 0; j < ImageIn.cols(); j++) {
				// get the color at the current pixel
				double[] color = ImageIn.get(i, j);
				if (color[0] < 20 && color[1] < 20 && color[2] < 20) {
					// do nothing
				} else {
					// leftmost check -- Red A?
					if (i < 40)
						return 0;
					// rightmost check -- Blue A?
					else if (i > 520)
						return 1;
					// Upmost check -- Blue B?
					else if (j < 90)
						return 3;
					// Must be Red B, then
					else
						return 2;
				}
			}
		}
		// something screwed up
		return 4;
	}

}
